

#9: MSG = Payload + Header
#10: JMS, Payload object should be serialize able
#10: MessageHeaders implements Serializeable class.
But the POJOs do NOT have to be serializeable in spring framework.
(POJO Payload)
#10: Generic Implementation: GenericMessage & MessageBuilder classes.
#11: MessageBuilder example
#12: EndPoints: Transformers, Splitters, Filters, Routers
Adapters: JMS, FTP, JDBC, Twitter
#12: Service Activator Endpoint"
A service activator is a generic endpoint that invokes a method on a bean 
when a message arrives at an input channel.
#13: JMS Destination? JMS == "Java Messaging Service"
#14: ctx = new ClassPathXmlApplicationContext("basics-example-beans.xml");
     channel = ctx.getBean("trades-channel", MessageChannel.class);
	 ...
	 Trade trade = createNewTrade();
	 Message<Trade> tradeMsg =
	 MessageBuilder.withPayload(trade).build();
	 channel.send(tradeMsg,1000);
	 
 #17: Message Channels
 boolean send(Message message);
 boolean send(Message message, long timeout);
 -1 for forever.
 0 = NOW
 +positive = wait before throwing error.
 
 #18: Round Robin Strategy?
 https://en.wikipedia.org/wiki/Round-robin_scheduling
 Every process gets an equal slice of time. In a big loop.
 Starvation free, no priority, easy to implement.
 
 P2P: 1 on 1
 Pub-Sub: 1 message sent to MULTIPLE subscriber endpoints.
 
 Buffering... saves you from large payloads all at once.
 
 Recieving Messages:
 PollableChannel extends MessageChannel
 SubscribableChannel extends MessageChannel
 
 #20: MessageHandler class.
 #21: <int:publish-subscribe-channel id="pubsub-channel" />
 
 
 #23: AcountComparator implements Comparator<Message<Account>>
 Weird: i1 and i2 are Integer types:
 return i1.compareTo(i2);
 #23: Comparator tag:
 <int:priority-que capacity="10" comparator="accountComparator"/>
 
 
 #29: Service Activators, Channel Adapters, Message Bridges, Gateways,
 Transformers, Filters, Routers. (Different types of endpoints)
 
 #30: Service Activator.
 What is a Position object?
 Is it a thing in Java?
 http://docs.oracle.com/javase/7/docs/api/javax/swing/text/Position.html
 Ah, so it is like when two people are inside a document editing it. Ok. Got it.
 
 #31: if no output-channel, falls back on replyChannel propery in message
 header. If no replyChannel specified, throws Exception.
 
 ON Service Activator:
 "The service method can have either Message or a Java object as an argument.
 
 @ServiceActivator
 http://docs.spring.io/spring-integration/docs/2.0.0.RC1/reference/html/service-activator.html
 
 
 #31: Message Bridge:
 Endpoint couples different messaging modes or adapters.
 
 Position Reciever bean?
 http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html
 Okay... So this book is about SOCKETS. And I think I rather do HTTP stuff...
 
 QUOTE the HYPERLINK:
/////////////////////////////////////////////////////////////////////////////
 21.1.4 Should I Use WebSocket?

With all the design considerations surrounding the use of WebSocket, 
it is reasonable to ask, "When is it appropriate to use?". The best fit for 
WebSocket is in web applications where the client and server need to exchange 
events at high frequency and with low latency. Prime candidates include, 
but are not limited to, applications in finance, games, collaboration, 
and others. Such applications are both very sensitive to time delays and 
also need to exchange a wide variety of messages at a high frequency.

For other application types, however, this may not be the case. 
For example, a news or social feed that shows breaking news as it becomes 
available may be perfectly okay with simple polling once every few minutes. 
Here latency is important, but it is acceptable if the news takes a few 
minutes to appear.

Even in cases where latency is crucial, if the volume of messages is relatively 
low (e.g. monitoring network failures) the use of long polling should be 
considered as a relatively simple alternative that works reliably and is 
comparable in terms of efficiency (again assuming the volume of messages 
is relatively low).

It is the combination of both low latency and high frequency of messages that 
can make the use of the WebSocket protocol critical. Even in such applications, 
the choice remains whether all client-server communication should be done 
through WebSocket messages as opposed to using HTTP and REST. The answer is 
going to vary by application; however, it is likely that some functionality 
may be exposed over both WebSocket and as a REST API in order to provide 
clients with alternatives. Furthermore, a REST API call may need to broadcast 
a message to interested clients connected via WebSocket.

The Spring Framework allows @Controller and @RestController classes to have 
both HTTP request handling and WebSocket message handling methods. 
Furthermore, a Spring MVC request handling method, or any application method 
for that matter, can easily broadcast a message to all interested WebSocket 
clients or to a specific user.
/////////////////////////////////////////////////////////////////////////////
 
 
 
 
 
 
 
 
 
 